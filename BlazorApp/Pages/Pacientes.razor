@using BlazorApp.Services;
@using DtoModels;

@page "/pacientes"

@inject ApiService apiService

<h3>Lista de Pacientes</h3>

@if (pacientes == null)
{
    <p>Aguarde...</p>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th scope="col">Número de Processo</th>
                <th scope="col">Nome</th>
                <th scope="col">Data de Nascimento</th>
                <th scope="col">Sexo</th>
                <th scope="col">Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var paciente in pacientes)
            {
                <tr>
                    <td>@paciente.Num_Processo</td>
                    <td>@paciente.Nome</td>
                    <td>@paciente.DataNascimento.ToShortDateString()</td>
                    <td>@paciente.Genero</td>
                    <td>
                        <button @onclick="() => VerDetalhes(paciente.Num_Processo)">Ver</button>
                        <button @onclick="() => EditarPaciente(paciente.Num_Processo)">Editar</button>
                        <button @onclick="() => RemoverPaciente(paciente.Num_Processo)">Remover</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Adicionar Paciente</h4>

    <EditForm Model="novoPaciente" OnValidSubmit="() => AdicionarPaciente(novoPaciente)">
        <div class="form-group">
            <label for="Nome">Nome</label>
            <input type="text" class="form-control" id="Nome" @bind="novoPaciente.Nome" />
        </div>
        <div class="form-group">
            <label for="DataNascimento">Data de Nascimento</label>
            <input type="date" min="@DateTime.Now.AddYears(-150).ToString("yyyy-MM-dd")" max="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" id="DataNascimento" @bind="novoPaciente.DataNascimento" />
        </div>
        <div class="form-group">
            <label>Sexo</label>
            <div class="form-check">
                <input type="radio" @bind="novoPaciente.Genero" @oninput="() => novoPaciente.Genero = PacienteDto._Genero.Masculino" /> Masculino
            </div>
            <div class="form-check">
                <input type="radio" @bind="novoPaciente.Genero" @oninput="() => novoPaciente.Genero = PacienteDto._Genero.Feminino" /> Feminino
            </div>
            <button type="submit" class="btn btn-primary">Adicionar</button>
        </div>
    </EditForm>
}

@code {
    private List<PacienteDto> pacientes = new List<PacienteDto>();
    PacienteDto novoPaciente = new PacienteDto();

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await AtualizarListaPacientes();
    }

    private async Task AtualizarListaPacientes()
    {
        pacientes = await apiService.GetPacientes();
        StateHasChanged();
    }

    private async Task AdicionarPaciente(PacienteDto paciente)
    {
        novoPaciente = await apiService.AddPaciente(paciente);
        if(novoPaciente != null)
            pacientes.Add(novoPaciente);

        await AtualizarListaPacientes();
    }

    private async Task EditarPaciente(int id)
    {
        _navigationManager.NavigateTo($"/pacientes/editarpaciente/{id}");
        await AtualizarListaPacientes();
    }

    private async Task RemoverPaciente(int numProcesso)
    {
        await apiService.DeletePaciente(numProcesso);

        pacientes.RemoveAll(p => p.Num_Processo == numProcesso);
        await AtualizarListaPacientes();
    }

    private async Task VerDetalhes(int id)
    {
        _navigationManager.NavigateTo($"/pacientes/detalhes_paciente/{id}");
        await AtualizarListaPacientes();
    }
}